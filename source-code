#include <bits/stdc++.h>
#include <ctime>
#include <cstdlib>
#include <iomanip>

using namespace std;

int board[4][4];
int dirLine[] = {1, 0, -1, 0};
int dirColumn[] = {0, 1, 0, -1};

pair<int, int> generateUnoccupiedPosition() {
    int occupied = 1;
    int line, column;
    while (occupied) {
        line = rand() % 4;
        column = rand() % 4;
        if (board[line][column] == 0)
            occupied = 0;
    }
    return make_pair(line, column);
}

void addPiece() {
    pair<int, int> pos = generateUnoccupiedPosition();
    board[pos.first][pos.second] = 2;
}

void newGame() {
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            board[i][j] = 0;
    addPiece();
}

void printUI() {
    system("cls"); // Clear the screen (use "clear" instead of "cls" on Linux/Mac)
    for (int i = 0; i < 4; ++i) {
        for (int j = 0; j < 4; ++j) {
            if (board[i][j] == 0)
                cout << setw(4) << ".";
            else
                cout << setw(4) << board[i][j];
            cout << " ";
        }
        cout << "\n";
    }
    cout << "n: new game, w: up, s: down, d: right, a: left, q: quit \n";
}

bool canDoMove(int line, int column, int nextLine, int nextColumn) {
    if (nextLine < 0 || nextColumn < 0 || nextLine >= 4 || nextColumn >= 4)
        return false;
    if (board[line][column] != 0 && (board[nextLine][nextColumn] == 0 || board[line][column] == board[nextLine][nextColumn]))
        return true;
    return false;
}

bool checkWin() {
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 4; ++j)
            if (board[i][j] == 2048)
                return true;
    return false;
}

void applyMove(int direction) {
    int startLine = 0, startColumn = 0, lineStep = 1, columnStep = 1;
    if (direction == 0) { // Moving down
        startLine = 3;
        lineStep = -1;
    }
    if (direction == 1) { // Moving right
        startColumn = 3;
        columnStep = -1;
    }
    int movePossible = 0, canAddPiece = 0;
    do {
        movePossible = 0;
        for (int i = startLine; i >= 0 && i < 4; i += lineStep)
            for (int j = startColumn; j >= 0 && j < 4; j += columnStep) {
                int nextI = i + dirLine[direction], nextJ = j + dirColumn[direction];
                if (board[i][j] && canDoMove(i, j, nextI, nextJ)) {
                    board[nextI][nextJ] += board[i][j];
                    board[i][j] = 0;
                    movePossible = canAddPiece = 1;
                    if (board[nextI][nextJ] == 2048) {
                        printUI();
                        cout << "Congratulations! You won!\n";
                        exit(0);
                    }
                }
            }
        printUI();
    } while (movePossible);

    if (canAddPiece)
        addPiece();
}

int main() {
    srand(time(0));
    int commandToDir[128] = {};
    commandToDir['s'] = 0;
    commandToDir['d'] = 1;
    commandToDir['w'] = 2;
    commandToDir['a'] = 3;

    newGame();
    while (true) {
        printUI();
        char command;
        cin >> command;
        if (command == 'n') {
            newGame();
        } else if (command == 'q') {
            break;
        } else if (commandToDir[command] >= 0 && commandToDir[command] < 4) {
            int currentDirection = commandToDir[command];
            applyMove(currentDirection);
        } else {
            cout << "Invalid command. Try again.\n";
        }
    }
    return 0;
}
